/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  audioURL: "https://cdn.discordapp.com/attachments/718508936185118810/1137813613873209425/success.mp3"
};
var MyPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.previousContent = "";
    // Initialize to an empty string
    this.previousFile = "";
  }
  async onload() {
    console.log("Plugin loaded");
    await this.loadSettings();
    this.interval = window.setInterval(this.checkCheckboxes.bind(this), 100);
    this.addSettingTab(new MyPluginSettingTab(this.app, this));
  }
  checkCheckboxes() {
    const activeLeaf = this.app.workspace.activeLeaf;
    if (!activeLeaf)
      return;
    const view = activeLeaf.view;
    if (!(view instanceof import_obsidian.MarkdownView))
      return;
    const currentFile = view.file.path;
    if (currentFile !== this.previousFile) {
      this.previousFile = currentFile;
      this.previousContent = view.editor.getValue();
      return;
    }
    const editor = view.editor;
    const content = editor.getValue();
    if (content !== this.previousContent) {
      const lines = content.split("\n");
      const previousLines = this.previousContent.split("\n");
      for (let i = 0; i < lines.length; i++) {
        if (lines[i] !== previousLines[i] && /- \[x]\s/.test(lines[i]) && /- \[ ]\s/.test(previousLines[i])) {
          const audioToPlay = new Audio(this.settings.audioURL);
          audioToPlay.play().catch((e) => console.log("Audio play failed:", e));
        }
      }
      this.previousContent = content;
    }
  }
  onunload() {
    window.clearInterval(this.interval);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MyPluginSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    let { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for My Plugin" });
    new import_obsidian.Setting(containerEl).setName("Audio URL").setDesc("Enter the URL for the audio file you want to play.").addText((text) => text.setPlaceholder("Enter the audio URL here").setValue(this.plugin.settings.audioURL).onChange(async (value) => {
      this.plugin.settings.audioURL = value;
      await this.plugin.saveSettings();
    }));
  }
};
